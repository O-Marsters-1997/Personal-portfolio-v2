---
type Viewport = "mobile" | "small-tablet" | "tablet" | "desktop";

type Props = {
  includedViewports?: Viewport[];
};

const { includedViewports = ["mobile", "desktop"] } = Astro.props;
const numeral = 11;

// Important needs to be in the right order to work
const customSort = (array: Viewport[]) => {
  if (!array) return;
  const sortOrder = ["small-tablet", "tablet", "desktop"];
  array.sort((a: Viewport, b: Viewport) => {
    return sortOrder.indexOf(a) - sortOrder.indexOf(b);
  });

  const checkMandatoryViewports = (array: Viewport[]) => {
    // adds desktop if doesn't exist
    !array.includes("desktop") && includedViewports.push("desktop");

    // adds mobile if doesn't exist
    !array.includes("mobile") && array.unshift("mobile");
  };

  checkMandatoryViewports(array);
  return array;
};

const included = customSort(includedViewports) ?? [];
const viewportsString = included.join(", ");
---

<mobile-layout data-viewports={viewportsString} data-numeral={numeral}>
  <div class="slot__mobile">
    <slot name="mobile" />
  </div>

  {
    included.includes("small-tablet") && (
      <div class="slot__small-tablet">
        <slot name="small-tablet" />
      </div>
    )
  }
  {
    included.includes("tablet") && (
      <div class="slot__tablet">
        <slot name="tablet" />
      </div>
    )
  }
  {
    included.includes("desktop") && (
      <div class="slot__desktop">
        <slot name="desktop" />
      </div>
    )
  }
</mobile-layout>

<script is:inline>
  class MobileLayout extends HTMLElement {
    constructor() {
      super();

      const getLayoutByViewport = () => {
        const screen = {
          mobile: window.matchMedia("(min-width: 0px)"),
          "small-tablet": window.matchMedia("(min-width: 500px)"),
          tablet: window.matchMedia("(min-width: 650px)"),
          desktop: window.matchMedia("(min-width: 868px)"),
        };
        const variantsArr = document.querySelectorAll('[class*="slot"]');
        const included = this.dataset.viewports.split(", ");

        this.dataset.numeral++;

        const checkViewportSize = () => {
          let size = null;

          for (let i = included.length - 1; i >= 0; i--) {
            const viewport = included[i];
            const mq = screen[viewport];

            if (!mq || mq.matches) {
              size = viewport;
              break;
            }
          }

          for (let i = 0; i < variantsArr.length; i++) {
            const element = variantsArr[i];

            if (element.className == `slot__${size}`) {
              element.style.display = "block";
            } else {
              element.style.display = "none";
            }
          }
        };

        // Runs once on load
        checkViewportSize();

        // Adds event listener for subsequent refires
        for (let [scr, mq] of Object.entries(screen)) {
          if (mq) mq.addEventListener("change", checkViewportSize);
        }
      };

      getLayoutByViewport();
    }
  }

  customElements.define("mobile-layout", MobileLayout);
</script>
