---
// Mobile always included
type Viewport = "tablet" | "desktop";

type Props = {
  viewports: Viewport[];
};

const { viewports } = Astro.props;
const viewportsString = viewports.join(", ");
---

<mobile-layout data-viewports={viewportsString}>
  <div class="slot__mobile">
    <slot name="mobile" />
  </div>
  {
    viewports.includes("tablet") && (
      <div class="slot__tablet">
        <slot name="tablet" />
      </div>
    )
  }
  {
    viewports.includes("desktop") && (
      <div class="slot__desktop">
        <slot name="desktop" />
      </div>
    )
  }
</mobile-layout>

<script is:inline>
  class MobileLayout extends HTMLElement {
    constructor() {
      super();

      const getIsMobile = () => {
        // Decalring elements
        const variantsArr = document.querySelectorAll('[class*="slot"]');
        const variantsMap = Array.from(variantsArr).reduce((obj, element) => {
          const className = element.className.replace("slot__", "");
          obj[className] = element;
          return obj;
        }, {});

        const testQueries = [
          {
            query: "(min-width: 768px)",
            layout: "desktop",
          },
          {
            query: "(min-width: 500px)",
            layout: "tablet",
          },
        ];

        const viewports = this.dataset.viewports.split(", ");

        const selectedQuery = testQueries.find((mq) => {
          if (viewports.includes(mq.layout)) {
            return window.matchMedia(mq.query).matches;
          }
        });

        const selectedLayout = selectedQuery ? selectedQuery.layout : "mobile";

        console.log(selectedLayout);

        // Defining media query
        const mediaQuery = window.matchMedia("(min-width: 768px)");

        const chekViewportSize = (query) => {
          const selectedEl = query.matches
            ? variantsMap["desktop"]
            : variantsMap["mobile"];
          variantsArr.forEach((variant) => {
            variant.style.display = variant == selectedEl ? "block" : "none";
          });
        };

        // First check on page load
        chekViewportSize(mediaQuery);

        // if not then there will only be one layout
        if (variantsArr.length > 1) {
          // Subsequent checks fire on an onchange event listener
          mediaQuery.addEventListener("change", (event) => {
            chekViewportSize(event.target);
          });
        }
      };

      getIsMobile();
    }
  }

  customElements.define("mobile-layout", MobileLayout);
</script>
