---
// Mobile always included
type Viewport = "tablet" | "desktop";

type Props = {
  viewports: Viewport[];
};

const { viewports } = Astro.props;
const viewportsString = viewports.join(", ");
---

<mobile-layout data-viewports={viewportsString}>
  <div class="slot__mobile">
    <slot name="mobile" />
  </div>
  {
    viewports.includes("tablet") && (
      <div class="slot__tablet">
        <slot name="tablet" />
      </div>
    )
  }
  {
    viewports.includes("desktop") && (
      <div class="slot__desktop">
        <slot name="desktop" />
      </div>
    )
  }
</mobile-layout>

<script is:inline>
  class MobileLayout extends HTMLElement {
    constructor() {
      super();

      const getIsMobile = () => {
        const screen = {
          mobile: null,
          tablet: window.matchMedia("(min-width: 400px)"),
          desktop: window.matchMedia("(min-width: 768px)"),
        };
        const variantsArr = document.querySelectorAll('[class*="slot"]');

        const checkViewportSize = () => {
          let size = null;
          for (let [scr, mq] of Object.entries(screen)) {
            if (!mq || mq.matches) size = scr;
          }

          for (let i = 0; i < variantsArr.length; i++) {
            const element = variantsArr[i];
            if (element.className.includes(size)) {
              element.style.display = "block";
            } else {
              element.style.display = "none";
            }
          }
        };

        // Runs once on load
        checkViewportSize();

        // Adds event listener for subsequent refires
        for (let [scr, mq] of Object.entries(screen)) {
          if (mq) mq.addEventListener("change", checkViewportSize);
        }
      };

      getIsMobile();
    }
  }

  customElements.define("mobile-layout", MobileLayout);
</script>
